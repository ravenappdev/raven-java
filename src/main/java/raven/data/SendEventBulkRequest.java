/*
 * Raven API
 * This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@ravenapp.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package raven.data;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;

/**
 * SendEventBulk
 */
public class SendEventBulkRequest {
    @SerializedName("event")
    private String event;

    @SerializedName("batch")
    private List<BatchItem> batch;

    SendEventBulkRequest(Builder builder) {
        this.event = builder.event;
        this.batch = builder.batch;
    }

    public static class BatchItem {
        @SerializedName("user")
        User user;
        @SerializedName("data")
        Data data;
        @SerializedName("override")
        EventOverride override;

        private BatchItem(ItemBuilder builder) {
            this.user = builder.user;
            this.data = builder.data;
            this.override = builder.override;
        }

        public User getUser() {
            return user;
        }

        public Data getData() {
            return data;
        }

        public EventOverride getOverride() {return override;}

        /**
         * Builder for the SendEventBulk.BatchItem class objects
         **/
        public static class ItemBuilder {
            private final User user;
            private Data data;
            private EventOverride override;

            public ItemBuilder(User user) {
                this.user = user;
            }

            public ItemBuilder data(Data data) {
                this.data = data;
                return this;
            }

            public ItemBuilder override(EventOverride override) {
                this.override = override;
                return this;
            }

            public BatchItem build() {
                BatchItem obj = new BatchItem(this);
                validateObj(obj);
                return obj;
            }

            private void validateObj(BatchItem obj) {
                if (obj.user == null) {
                    throw new IllegalStateException("cannot create batch item with null user");
                }
            }
        }
    }

    /**
     * Get event
     *
     * @return event
     **/
    public String getEvent() {
        return event;
    }

    /**
     * Get batch
     *
     * @return batch
     **/
    public List<BatchItem> getBatch() {
        return batch;
    }

    /**
     * Builder for the SendEventBulk class objects
     **/
    public static class Builder {
        private String event;
        private final List<BatchItem> batch = new ArrayList<>();

        public Builder() {
        }

        public Builder event(String event) {
            this.event = event;
            return this;
        }

        public Builder batch(List<BatchItem> batch) {
            batch.forEach(item -> {
                if (item != null) {
                    this.batch.add(item);
                }
            });
            return this;
        }

        public SendEventBulkRequest build() {
            SendEventBulkRequest obj = new SendEventBulkRequest(this);
            validateObject(obj);
            return obj;
        }

        private void validateObject(SendEventBulkRequest obj) {
            if (event == null) {
                throw new IllegalStateException("event is null");
            }
        }
    }
}

